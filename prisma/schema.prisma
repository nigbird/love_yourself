
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  rewardPoints       Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  routines           Routine[]
  goals              Goal[]
  wishes             Wish[]
  journalEntries     JournalEntry[]
  routineLogs        RoutineCompletionLog[]
  goalLogs           GoalCompletionLog[]
  wishFulfillmentLogs WishFulfillmentLog[]
}

model Routine {
  id               String               @id @default(cuid())
  name             String
  frequency        RoutineFrequency
  daysOfWeek       Int[]
  timeOfDay        String?
  remindersEnabled Boolean              @default(true)
  rewardPoints     Int
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  user             User                 @relation(fields: [userId], references: [id])
  userId           String
  completionLogs   RoutineCompletionLog[]
}

model RoutineCompletionLog {
  id          String   @id @default(cuid())
  routineId   String
  routine     Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  completedAt DateTime @default(now())
}

model Goal {
  id           String             @id @default(cuid())
  name         String
  type         GoalType
  targetValue  Float?
  currentValue Float?
  unit         String?
  rewardPoints Int
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         User               @relation(fields: [userId], references: [id])
  userId       String
}

model GoalCompletionLog {
  id           String   @id @default(cuid())
  goalId       String
  goalName     String
  goalType     GoalType
  rewardPoints Int
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  completedAt  DateTime @default(now())
}

model Wish {
    id        String    @id @default(cuid())
    title     String
    note      String?
    imageUrl  String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id])
    userId    String
}

model WishFulfillmentLog {
    id          String   @id @default(cuid())
    wishId      String
    wishTitle   String
    wishNote    String?
    imageUrl    String?
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    fulfilledAt DateTime @default(now())
}

model JournalEntry {
  id        String   @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  mood      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

enum RoutineFrequency {
  daily
  weekly
  monthly
  custom
}

enum GoalType {
  personal_measurable
  spiritual
}
