
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  rewardPoints    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  routines              Routine[]
  goals                 Goal[]
  wishes                Wish[]
  journalEntries        JournalEntry[]
  routineCompletionLogs RoutineCompletionLog[]
  goalCompletionLogs    GoalCompletionLog[]
  wishFulfillmentLogs   WishFulfillmentLog[]
}

model Routine {
  id               String           @id @default(cuid())
  name             String
  frequency        RoutineFrequency
  daysOfWeek       Int[]
  timeOfDay        String?
  remindersEnabled Boolean          @default(true)
  rewardPoints     Int              @default(10)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  completionLogs RoutineCompletionLog[]
}

model Goal {
  id           String    @id @default(cuid())
  name         String
  type         GoalType
  targetValue  Float?
  currentValue Float?
  unit         String?
  startDate    DateTime? @default(now())
  endDate      DateTime?
  rewardPoints Int       @default(50)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  completionLogs GoalCompletionLog[]
}

model Wish {
  id        String   @id @default(cuid())
  title     String
  note      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  fulfillmentLogs WishFulfillmentLog[]
}

model JournalEntry {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  imageUrl  String?
  mood      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model RoutineCompletionLog {
  id           String   @id @default(cuid())
  routineName  String
  rewardPoints Int
  completedAt  DateTime @default(now())
  notes        String?

  user      User     @relation(fields: [userId], references: [id])
  userId    String
  routine   Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
  routineId String
}

model GoalCompletionLog {
  id           String   @id @default(cuid())
  goalName     String
  goalType     GoalType
  rewardPoints Int
  completedAt  DateTime @default(now())
  notes        String?
  value        Float? // For measurable goals final value

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  goal    Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
  goalId  String
}

model WishFulfillmentLog {
  id          String   @id @default(cuid())
  wishTitle   String
  wishNote    String?
  imageUrl    String?
  fulfilledAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
  wish   Wish   @relation(fields: [wishId], references: [id], onDelete: Cascade)
  wishId String
}

enum RoutineFrequency {
  daily
  weekly
  monthly
  custom
}

enum GoalType {
  personal_measurable
  spiritual
}
