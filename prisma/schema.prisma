
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String               @unique
  rewardPoints       Int                  @default(0)
  routines           Routine[]
  goals              Goal[]
  journalEntries     JournalEntry[]
  wishes             Wish[]
  routineLogs        RoutineCompletionLog[]
  goalLogs           GoalCompletionLog[]
  wishFulfillmentLogs WishFulfillmentLog[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Routine {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name             String
  frequency        String // Was RoutineFrequency
  daysOfWeek       String? // Stored as comma-separated string
  timeOfDay        String?
  remindersEnabled Boolean  @default(true)
  rewardPoints     Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  completionLogs   RoutineCompletionLog[]
}

model RoutineCompletionLog {
  id           String   @id @default(cuid())
  routineId    String
  routine      Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  routineName  String
  rewardPoints Int
  completedAt  DateTime
}

model Goal {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  type         String // Was GoalType
  rewardPoints Int
  startDate    DateTime?
  endDate      DateTime?
  targetValue  Float?
  currentValue Float?
  unit         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  completionLogs GoalCompletionLog[]
}

model GoalCompletionLog {
  id           String   @id @default(cuid())
  goalId       String
  goal         Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalName     String
  goalType     String
  rewardPoints Int
  completedAt  DateTime
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  content   String
  imageUrl  String?
  mood      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wish {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  note        String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fulfillment WishFulfillmentLog[]
}

model WishFulfillmentLog {
  id          String   @id @default(cuid())
  wishId      String
  wish        Wish     @relation(fields: [wishId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wishTitle   String
  wishNote    String?
  imageUrl    String?
  fulfilledAt DateTime
}
