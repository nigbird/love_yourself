// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String @id @default(cuid())
  name         String
  email        String @unique
  rewardPoints Int    @default(0)

  routines      Routine[]
  goals         Goal[]
  journalEntries JournalEntry[]
  wishes        Wish[]
  
  routineCompletionLogs RoutineCompletionLog[]
  goalCompletionLogs    GoalCompletionLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoutineFrequency {
  daily
  weekly
  monthly
  custom
}

model Routine {
  id               String    @id @default(cuid())
  name             String
  frequency        RoutineFrequency
  daysOfWeek       Int[]
  timeOfDay        String?
  remindersEnabled Boolean   @default(true)
  rewardPoints     Int       @default(10)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  completionLogs RoutineCompletionLog[]

  @@unique([name, userId])
}

model RoutineCompletionLog {
  id          String   @id @default(cuid())
  completedAt DateTime @default(now())
  notes       String?
  
  routineId String
  routine   Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([routineId])
  @@index([userId])
}

enum GoalType {
  personal_measurable
  spiritual
}

model Goal {
  id           String   @id @default(cuid())
  name         String
  type         GoalType
  rewardPoints Int
  
  // Fields for measurable goals
  targetValue  Float?
  currentValue Float?   @default(0)
  unit         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  completionLogs GoalCompletionLog[]

  @@unique([name, userId])
}

model GoalCompletionLog {
  id          String   @id @default(cuid())
  completedAt DateTime @default(now())
  notes       String?
  value       Float?   // For logging progress on measurable goals
  
  goalId String
  goal   Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([goalId])
  @@index([userId])
}

model JournalEntry {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  imageUrl  String?
  mood      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Wish {
  id        String   @id @default(cuid())
  title     String
  note      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
